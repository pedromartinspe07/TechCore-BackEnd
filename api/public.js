const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');

const Noticia = require('../../models/Noticia');
const Comentario = require('../../models/Comentario');
const Resposta = require('../../models/Resposta');

// Utilit치rio: valida se um ID 칠 um ObjectId v치lido
const isValidObjectId = (id) => mongoose.Types.ObjectId.isValid(id);

// Middleware para validar ObjectId em rotas din칙micas
function validarId(paramName) {
  return (req, res, next) => {
    const id = req.params[paramName];
    if (!isValidObjectId(id)) {
      return res.status(400).json({ mensagem: `ID de ${paramName} inv치lido.` });
    }
    next();
  };
}

// Rota de status da API
router.get('/', (req, res) => {
  console.log('游깷 API p칰blica acessada');
  res.send('游깷 API TechCore rodando com sucesso! - Rota p칰blica');
});

// Buscar todas as not칤cias
router.get('/noticias', async (req, res) => {
  try {
    const noticias = await Noticia.find().sort({ data: -1 });
    res.status(200).json(noticias);
  } catch (err) {
    console.error('Erro ao buscar not칤cias:', err);
    res.status(500).json({ mensagem: 'Erro ao buscar not칤cias.' });
  }
});

// Buscar uma not칤cia espec칤fica
router.get('/noticias/:noticiaId', validarId('noticiaId'), async (req, res) => {
  try {
    const noticia = await Noticia.findById(req.params.noticiaId);
    if (!noticia) return res.status(404).json({ mensagem: 'Not칤cia n칚o encontrada.' });
    res.status(200).json(noticia);
  } catch (err) {
    console.error('Erro ao buscar not칤cia:', err);
    res.status(500).json({ mensagem: 'Erro ao buscar not칤cia.' });
  }
});

// Buscar coment치rios de uma not칤cia
router.get('/noticias/:noticiaId/comentarios', validarId('noticiaId'), async (req, res) => {
  try {
    const comentarios = await Comentario.find({ noticia: req.params.noticiaId }).sort({ createdAt: -1 });
    res.status(200).json(comentarios);
  } catch (err) {
    console.error('Erro ao buscar coment치rios:', err);
    res.status(500).json({ mensagem: 'Erro ao buscar coment치rios.' });
  }
});

// Buscar um coment치rio espec칤fico
router.get('/noticias/:noticiaId/comentarios/:comentarioId', validarId('comentarioId'), async (req, res) => {
  try {
    const comentario = await Comentario.findById(req.params.comentarioId);
    if (!comentario) return res.status(404).json({ mensagem: 'Coment치rio n칚o encontrado.' });
    res.status(200).json(comentario);
  } catch (err) {
    console.error('Erro ao buscar coment치rio:', err);
    res.status(500).json({ mensagem: 'Erro ao buscar coment치rio.' });
  }
});

// Buscar respostas de um coment치rio
router.get('/noticias/:noticiaId/comentarios/:comentarioId/respostas', validarId('comentarioId'), async (req, res) => {
  try {
    const respostas = await Resposta.find({ comentario: req.params.comentarioId }).sort({ createdAt: -1 });
    res.status(200).json(respostas);
  } catch (err) {
    console.error('Erro ao buscar respostas:', err);
    res.status(500).json({ mensagem: 'Erro ao buscar respostas.' });
  }
});

// Buscar uma resposta espec칤fica
router.get('/noticias/:noticiaId/comentarios/:comentarioId/respostas/:respostaId', validarId('respostaId'), async (req, res) => {
  try {
    const resposta = await Resposta.findById(req.params.respostaId);
    if (!resposta) return res.status(404).json({ mensagem: 'Resposta n칚o encontrada.' });
    res.status(200).json(resposta);
  } catch (err) {
    console.error('Erro ao buscar resposta:', err);
    res.status(500).json({ mensagem: 'Erro ao buscar resposta.' });
  }
});

module.exports = router;
